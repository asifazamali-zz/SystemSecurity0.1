from django.http import HttpResponse 	
from pymongo import Connection
from bson import ObjectId
from django.shortcuts import render
#from django.contrib.auth.models import user
from django.http import HttpResponseRedirect
import json
from ifc import get_collection

class RWFM(object):
	""" Class RWFM handles all operations required to implement IFC in the application"""

	def checkRead(self,sublabel,objectlabel):
		""" This method call checks if user i.e. the subject can read the object w.r.t IFC."""
		""" This method returns a dict which has boolean value True or False and changed labels of 
		subject after a successfull read."""
		""" Save the subject label after recieving the return value """	

		if set(sublabel["owner"]).issubset(set(objectlabel["readers"])):
			newsublabel = changeLabelRead(sublabel,objectlabel)
			return {"bool":True,"sublabel": newsublabel}
		else:
			return {"bool":False,"sublabel": sublabel}

	@classmethod
	def changeLabelRead(self,sublabel,objectlabel):
		""" Returns the Changed label of subject to reflect that it may gain information after 
		reading the object and permit access. """

		newR = list(set(sublabel["readers"]).intersection(set(objectlabel["readers"])))
		newW = list(set(sublabel["writers"]).union(set(objectlabel["writers"])))
		newsubjectlabel = {"owner":sublabel["owner"],"readers": newR,"writers": newW}


		return newsubjectlabel

	def checkWrite(self,sublabel,objectlabel):
		""" This method call checks if user i.e. the subject can write to the object w.r.t IFC."""
		""" This method returns boolean value True or False. No label change is required. """

		temp = set(sublabel["owner"]).issubset(set(objectlabel["writers"])) and set(sublabel["readers"]).issuperset(set(objectlabel["readers"])) and set(sublabel["writers"]).issubset(set(objectlabel["writers"]))                          

		if temp:
			return True
		else:
			return False

	def createObjLabel(self,sublabel,obj_pk):
		""" Returns the object label for the new object being created, derived from the subject label. """
		""" obj_pk is the object primary key to refer to the object from it's label.
		Call this method after inserting the object into your database.
		Pass its pk to this method with the subject label who created it. """

		objectlabel = {"obj_id": obj_pk, "owner": sublabel["owner"], "readers": sublabel["readers"],"writers": sublabel["writers"]}
		obj = LabelManager()
		if obj.saveLabel(objectlabel):
			return True
		else:
			return False
	def checkUpgrade(self,sublabel,objtemp2,objtemp3):

		if((set(sublabel["owner"]).issubset(set(objtemp2["readers"]))) and (sublabel["owner"]==objtemp2["owner"]==objtemp3["owner"]) and (set(sublabel["readers"]).issubset(set(objtemp2["readers"] ))) and (set(sublabel["writers"])==set(objtemp2["writers"])==set(objtemp3["writers"])) and  (set(objtemp3["readers"]).issubset(set(sublabel["readers"])))):
			return True
		else:
			return False
	def checkDowngrade(self,sublabel,objtemp2,objtemp3):
		if((set(sublabel["owner"]).issubset(set(objtemp2["readers"]))) and (sublabel["owner"]==objtemp2["owner"]==objtemp3["owner"]) and (set(sublabel["readers"])==set(objtemp2["readers"])) and (set(sublabel["writers"])==set(objtemp2["writers"])==set(objtemp3["writers"])) and (set(objtemp2["readers"]).issubset(set(objtemp3["readers"]))) and ((set(sublabel["writers"])==set(sublabel["owner"])) or (set(set(objtemp3["readers"]).difference(set(objtemp2["readers"]))).issubset(set(objtemp2["writers"]))))):
			return True
		else:
			return False


class LabelManager(object):
	"""LabelManager class performs CRUD operations on the label database in MongoDb"""

	def getLabel(self,obj_pk):
		rwlabel = get_collection("rwlabel")
		label = rwlabel.find_one({"obj_id":obj_pk}) 
		if label:	
			return label
		else:
			return None

	def saveLabel(self,label):
		rwlabel = get_collection("rwlabel")
		if rwlabel.save(label):
			return True
		else:
			return False

	def updateLabel(self,obj_pk,objlabel):
		label = rwlabel.find_one({"obj_id":obj_pk})
		if label:
			rwlabel.update({'obj_id':obj_pk}, {"$set": objlabel}, upsert=False)
			return True
		else:
			return False
			
	def deleteLabel(self,obj_pk):
		rwlabel = get_collection("rwlabel")
		if rwlabel.remove({"obj_id":obj_pk}):
			return True
		else:
			return False








			




		







